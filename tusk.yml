interpreter: bash -c
usage: arenactl
options:
  launchdir:
    default:
      command: echo $PWD
  openai-api-key:
    default:
      command: echo $ARENASTATE_OPENAI_API_KEY

tasks:
  showcfg:
    args:
      name:
    run:
      - command:
          exec: |
            set -e
            DIR=$(cd ${launchdir} && pwd)
            cat $DIR/${name}.cfg.json

  oai-list:
    run:
      - command:
          exec: |
            set -e
            curl https://api.openai.com/v1/models \
              -H "Authorization: Bearer ${openai-api-key}"

  oai-model:
    args:
      model:
    run:
      - command:
          exec: |
            set -e
            curl https://api.openai.com/v1/models/${model} \
              -H "Authorization: Bearer ${openai-api-key}"
  oai-scene-text:
    run:
      - command:
          exec: |
            set -e
            # "prompt": "In the voice of an adventure game, provide a discription of the scene observed by a player who just entered a room through its south door. Note that the room is part of a dungeon and the player is nervous of traps. The room has for sides. There are two doors in the east side. There is one door in the south side.",
            curl -X POST https://api.openai.com/v1/completions \
              -H 'Content-Type: application/json' \
              -H 'Authorization: Bearer ${openai-api-key}' \
              -d '{
                "model": "text-davinci-003",
                "prompt": "In the voice of an adventure game, provide a discription of the scene observed by a player who just entered a room through its south door. Note that the room is part of a dungeon and the player is nervous of traps. The room has for sides. There are two doors in the east side. There is one door in the south side.",
                "max_tokens": 1024
              }' | jq -r
  oai-scene:
    run:
      - command:
          exec: |
            set -e
            DIR=.local/dev/wallets
            WALLET=$(cat $DIR/robin.addr)
            curl -X POST https://api.openai.com/v1/images/generations \
              -H 'Content-Type: application/json' \
              -H 'Authorization: Bearer ${openai-api-key}' \
              -d '{
                "prompt": "Your eyes scan the room nervously, looking for traps. You note the door you just stepped through in the south side, and two doors on the east side. The walls of the room are lined with ancient stone and the air is humid and stale - a stark reminder that you are underground in a dungeon. You take a deep breath in preparation for what the next room may hold",
                
                "n": 2,
                "size": "512x512",
                "response_format": "url"
              }' | jq -r

  oai-game-icon:
    run:
      - command:
          exec: |
            set -e
            DIR=.local/dev/wallets
            WALLET=$(cat $DIR/robin.addr)
            curl -X POST https://api.openai.com/v1/images/generations \
              -H 'Content-Type: application/json' \
              -H 'Authorization: Bearer ${openai-api-key}' \
              -d '{
                "prompt": "A stylised icon representing a turn based random dungeon crawler game",
                
                "n": 2,
                "size": "512x512",
                "response_format": "b64_json"
              }' | jq -r

  new-wallet:
    args:
      name:
    run:
      - command:
          exec: |
            set -e
            DIR=.local/dev/wallets
            mkdir -p $DIR
            cast wallet new > $DIR/${name}.txt
            cat $DIR/${name}.txt | egrep "^Address: " | cut -d ' ' -f2 > $DIR/${name}.addr
            cat $DIR/${name}.txt | egrep "^Private Key: " | cut -d ' ' -f3 > $DIR/${name}.key

  wallet:
    args:
      name:
    run:
      - command:
          exec: |
            DIR=.local/dev/wallets
            cat $DIR/${name}.addr
  key:
    args:
      name:
    run:
      - command:
          exec: |
            DIR=.local/dev/wallets
            cat $DIR/${name}.key
  keyfile:
    args:
      name:
    run:
      - echo $(pwd)/.local/dev/wallets/${name}.key

  cfg:
    options:
      force:
        type: bool
        default: false
        short: "f"
      verbose:
        default: true
      chain-url:
        default: https://chains.hoy.polysensus.io/chains/caimst-209301/node/ethnode0/WWdEOHJUNVFDRXpPZ0VDb1IxTVpYOmFyZ29uMmlkIDMgNjRNQiAzMi5Kdkt6cEU5U09HNW02a3RBXzViYk8yRFZNeUw3cXBEdm5vQjhlOEtQMk5rPS5pR2JMMXpDRzBxbVRKdnRUN2RkLURxWlhSbDkxTWlYQm1RNDlKVzhjOF9jPQ==
      providers:
        short: "p"
      deploykey:
        short: "d"
      key:
        short: "k"
      deployacc:
      abi:
      map:
      key1:
      key2:
      key3:
    args:
      name:
    run:
      - command:
          exec: |
            DIR=$(cd ${launchdir} && pwd)
            mkdir -p $DIR
            CFG=$DIR/${name}.cfg.json
            ${force} && rm -f $CFG
            [ -f ${CFG} ] && echo "$CFG exists, -f to force" && exit 1

            # TODO: use https://github.com/jpmens/jo/blob/master/jo.md

            echo "{" >> $CFG
            [ -n "${verbose}" ] && \
            echo '  "verbose": "${verbose}",' >> $CFG
            [ -n "${chain-url}" ] && \
            echo '  "chain-url": "${chain-url}",' >> $CFG
            [ -n "${providers}" ] && \
            echo '  "providers": "${providers}",' >> $CFG
            [ -n "${deploykey}" ] && \
            echo '  "deploykey": "${deploykey}",' >> $CFG
            [ -n "${deployacc}" ] && \
            echo '  "deployacc": "${deployacc}",' >> $CFG
            [ -n "${abi}" ] && \
            echo '  "abi": "${abi}",' >> $CFG
            [ -n "${map}" ] && \
            echo '  "map": "${map}",' >> $CFG
            [ -n "${key}" ] && \
            echo '  "key": "${key}",' >> $CFG
            [ -n "${key1}" ] && \
            echo '  "key1": "${key1}",' >> $CFG
            [ -n "${key2}" ] && \
            echo '  "key2": "${key2}",' >> $CFG
            [ -n "${key3}" ] && \
            echo '  "key3": "${key3}",' >> $CFG

            # easiest way to deal with traling ',' is to put this one last
            echo "  \"launchdir\": \"$DIR\"" >> $CFG
            echo '}' >> $CFG
