---
version: "3"

vars:
  CURL_CICD_DEV: "curl -s -H 'Accept: application/vnd.github.v3.raw' -L https://api.github.com/repos/polysensus/cicd-dev-infra/contents"
  TUSKS: ".local/dev"
  FACETS_EXCLUDE: node_modules/@polysensus/chaintrap-contracts/abi/facets-exclude.json
  CHAINTRAP_CONTRACTS_ABI_DIR: node_modules/@polysensus/chaintrap-contracts/abi
  DIAMOND_DEPLOY_JSON: .local/dev/diamond-deploy.json
  DEPLOYCLI: "node node_modules/@polysensus/diamond-deploy/dist/deploycli.esm.js"

tasks:
  bootstrap:
    desc: fetch the pre-requisites for all workflows
    cmds:
      - |
        mkdir -p {{.TUSKS}}
        cd {{.TUSKS}}
        {{.CURL_CICD_DEV}}/js/tusk-jspkg.yml?ref=v0.0.5 -o tusk-jspkg.yml
        {{.CURL_CICD_DEV}}/hardhat/tusk-hardhat.yml?ref=v0.0.5 -o tusk-hardhat.yml

  release:patch:
    desc: create patch release
    cmds:
      - |
        tusk -q -f {{.TUSKS}}/tusk-jspkg.yml version-update {{.CLI_ARGS}}

  fmt:
    - npm run format
  format:
    desc: automatic code formatting - run prettier and then lint
    cmds:
      - |
        npm run format
        npm run lint

  build:
    cmds:
      - task: build:js
      - task: build:diamond-deploy

  test:prepare:cd:
    desc: start hardhat and deploy contracts for test:integ
    cmds:
      - |
        cat .env.example.test.cd | envsubst > .env.test
        cat .env.test | grep _KEY

  test:prepare:
    dotenv: [".env.test"]
    desc: default preflight for local development
    cmds:
      - task: test:prepare:local

  test:prepare:local:
    desc: start hardhat and deploy contracts for test:integ
    cmds:
      - |
      - task: dev:hh:restart
      - task: deploy:new
        vars:
          PROVIDER_ID: "hh"
          COMMIT: "yes"
      - task: find
        vars:
          PROVIDER_ID: "hh"

  test:
    desc: run the integration tests
    cmds:
      - npx mocha './**/*.mocha.js' {{.CLI_ARGS}}

  build:js:
    desc: format and lint the code, then build the package
    deps: [format]
    cmds:
      - npm run build

  build:diamond-deploy:
    desc: generate the deployable list of facets
    cmds:
      - |
        mkdir -p .local/dev
        {{.DEPLOYCLI}} \
          list \
          -I facet -i {{.CHAINTRAP_CONTRACTS_ABI_DIR}} \
          --exclude {{.FACETS_EXCLUDE}} \
          -n Diamond DiamondNew \
          --format json | tee {{.DIAMOND_DEPLOY_JSON}}

  # ----
  # hardhat game commands
  # ----
  chaintrap:hh:creategame:
    dotenv: [".env.hh"]
    cmds:
      - |
        export ARENASTATE_ARENA=$(tusk -f tusk-arena.yml diamond-find)
        echo "arena proxy: $ARENASTATE_ARENA"
        tusk -f tusk-tests.yml creategame

  chaintrap:hh:joingame:
    dotenv: [".env.hh"]
    cmds:
      - |
        export ARENASTATE_ARENA=$(tusk -q -f tusk-arena.yml diamond-find)
        echo "arena proxy: $ARENASTATE_ARENA"
        tusk -f tusk-tests.yml joingame

  chaintrap:hh:startgame:
    dotenv: [".env.hh"]
    cmds:
      - |
        export ARENASTATE_ARENA=$(tusk -q -f tusk-arena.yml diamond-find)
        echo "arena proxy: $ARENASTATE_ARENA"
        tusk -f tusk-tests.yml startgame

  chaintrap:hh:commitchoice:
    dotenv: [".env.hh"]
    cmds:
      - |
        export ARENASTATE_ARENA=$(tusk -q -f tusk-arena.yml diamond-find)
        echo "arena proxy: $ARENASTATE_ARENA"
        tusk -f tusk-tests.yml commitchoice -- {{.CLI_ARGS}}

  chaintrap:hh:resolvechoice:
    dotenv: [".env.hh"]
    cmds:
      - |
        export ARENASTATE_ARENA=$(tusk -q -f tusk-arena.yml diamond-find)
        echo "arena proxy: $ARENASTATE_ARENA"
        tusk -f tusk-tests.yml resolvechoice

  # ---
  # optimism game commands
  # ---
  chaintrap:op:creategame:
    dotenv: [".env.op"]
    cmds:
      - |
        export ARENASTATE_ARENA=$(tusk -q -f tusk-arena.yml diamond-find)
        echo "arena proxy: $ARENASTATE_ARENA"
        tusk -f tusk-tests.yml creategame

  chaintrap:op:joingame:
    dotenv: [".env.op"]
    cmds:
      - |
        export ARENASTATE_ARENA=$(tusk -q -f tusk-arena.yml diamond-find)
        echo "arena proxy: $ARENASTATE_ARENA"
        tusk -f tusk-tests.yml joingame

  chaintrap:op:startgame:
    dotenv: [".env.op"]
    cmds:
      - |
        export ARENASTATE_ARENA=$(tusk -q -f tusk-arena.yml diamond-find)
        echo "arena proxy: $ARENASTATE_ARENA"
        tusk -f tusk-tests.yml startgame

  chaintrap:op:commitchoice:
    dotenv: [".env.op"]
    cmds:
      - |
        export ARENASTATE_ARENA=$(tusk -q -f tusk-arena.yml diamond-find)
        echo "arena proxy: $ARENASTATE_ARENA"
        tusk -f tusk-tests.yml commitchoice -- {{.CLI_ARGS}}

  chaintrap:op:resolvechoice:
    dotenv: [".env.op"]
    cmds:
      - |
        export ARENASTATE_ARENA=$(tusk -q -f tusk-arena.yml diamond-find)
        echo "arena proxy: $ARENASTATE_ARENA"
        tusk -f tusk-tests.yml resolvechoice

  # ---
  # mumbai game commands
  # ---

  chaintrap:mumbai:creategame:
    dotenv: [".env.mumbai"]
    cmds:
      - |
        export ARENASTATE_ARENA=$(tusk -q -f tusk-arena.yml diamond-find)
        echo "arena proxy: $ARENASTATE_ARENA"
        tusk -f tusk-tests.yml creategame

  chaintrap:mumbai:joingame:
    dotenv: [".env.mumbai"]
    cmds:
      - |
        export ARENASTATE_ARENA=$(tusk -q -f tusk-arena.yml diamond-find)
        echo "arena proxy: $ARENASTATE_ARENA"
        tusk -f tusk-tests.yml joingame

  deploy:
    desc: deploy the contracts to all supported networks
    cmds:
      - task: deploy:new
        vars:
          PROVIDER_ID: "hh"
          COMMIT: "yes"
      - task: deploy:new
        vars:
          PROVIDER_ID: "caimst"
      - task: deploy:mumbai
      - task: deploy
        vars:
          PROVIDER_ID: opgoerli

  op:bridge-eth:
    dotenv: [".env.opgoerli"]
    desc: |
      bridge eth from Optimism L1 to L2.

      example use

        task op:bridge-eth -- $(cat .local/dev/wallets/wallet-deploy.key) 0.5 --commit
    cmds:
      - |
        tusk -f tusk-arena.yml op-bridge-eth {{.CLI_ARGS}}

  deploy:mumbai:
    desc: deploy the contracts to polygon mumbai testnet
    cmds:
      - task: deploy:up
        vars:
          PROVIDER_ID: "mumbai"
          GAS_PRICE: "2.6"

  deploy:mumbai-new:
    desc: deploy the contracts to polygon mumbai testnet
    cmds:
      - task: deploy:new
        vars:
          PROVIDER_ID: "mumbai"
          GAS_PRICE: "2.6"

  find:mumbai:
    dotenv: [".env.mumbai"]
    desc: find the arena on mumbai
    cmds:
      - |
        tusk -f tusk-arena.yml diamond-find

  deploy:up:
    desc: deploy the contracts to hardhat (assumes the local server is listening on 8545)
    dotenv: [".env.{{.PROVIDER_ID}}"]
    vars:
      PROVIDER_ID: '{{.PROVIDER_ID | default "hh"}}'
      GAS_PRICE: '{{.GAS_PRICE | default ""}}'
      DIAMOND_ADDRESS: '{{.DIAMOND_ADDRESS | default ""}}'
      DIAMOND_NONCE: '{{.DIAMOND_NONCE | default ""}}'
    cmds:
      - |
        echo "ARENASTATE_DEPLOY_KEY: $ARENASTATE_DEPLOY_KEY"
        echo "PROVIDER_ID {{.PROVIDER_ID}}"
        echo "ARENASTATE_ARENA: $ARENASTATE_ARENA"
        DIAMOND_ADDRESS=${ARENASTATE_AREANA:-"{{.DIAMOND_ADDRESS}}"}
        echo "DIAMOND_ADDRESS: $DIAMOND_ADDRESS"
        DIAMOND_NONCE=${ARENASTATE_DIAMOND_NONCE:-"{{.DIAMOND_NONCE}}"}
        echo "DIAMOND_NONCE: $DIAMOND_NONCE"

        {{.DEPLOYCLI}} list \
          -I facet -n Diamond DiamondNew \
          -i node_modules/@polysensus/chaintrap-contracts/abi \
          --format json -x node_modules/@polysensus/chaintrap-contracts/abi/facets-exclude.json \
          > diamond-deploy.json

        {{.DEPLOYCLI}} \
          -u "${ARENASTATE_PROVIDER_URL}" \
          -d "${ARENASTATE_DEPLOY_KEY}" \
          diamond-up \
            $([ -n '{{.DIAMOND_NONCE}}' ] && echo -n '--diamond-nonce {{.DIAMOND_NONCE}}' ) \
            $([ -n '{{.DIAMOND_ADDRESS}}' ] && echo -n '--diamond-address {{.DIAMOND_ADDRESS}}' ) \
            --replace \
            $([ -n '{{.GAS_PRICE}}' ] && echo -n '--gasprice {{.GAS_PRICE}}' ) \
            --legacy \
            --diamond-owner-key ${ARENASTATE_OWNER_KEY} \
            --diamond-init-name DiamondNew \
            --diamond-init-args \
              '[{"typeURIs": ["GAME_TYPE", "TRANSCRIPT_TYPE", "FURNITURE_TYPE"]}]' \
            -f diamond-deploy.json \
            {{.CLI_ARGS}}

          # '-- --commit' (utilising .CLI_ARGS) is the idiomatic way to cause the action to commit

  deploy:new:
    dotenv: [".env.{{.PROVIDER_ID}}"]
    vars:
      PROVIDER_ID: '{{.PROVIDER_ID | default "hh"}}'
      GAS_PRICE: '{{.GAS_PRICE | default ""}}'
      COMMIT: '{{.COMMIT | default ""}}'

    desc: deploy the contracts to hardhat (assumes the local server is listening on 8545)
    cmds:
      - |

        echo "PROVIDER_ID {{.PROVIDER_ID}}"
        echo "ARENASTATE_DEPLOY_KEY: $ARENASTATE_DEPLOY_KEY"

        {{.DEPLOYCLI}} list \
          -I facet -n Diamond DiamondNew \
          -i node_modules/@polysensus/chaintrap-contracts/abi \
          --format json -x node_modules/@polysensus/chaintrap-contracts/abi/facets-exclude.json \
          > diamond-deploy.json

        {{.DEPLOYCLI}} \
          -u "${ARENASTATE_PROVIDER_URL}" \
          -d "${ARENASTATE_DEPLOY_KEY}" \
          diamond-new \
            --replace \
            $([ -n '{{.GAS_PRICE}}' ] && echo -n '--gasprice {{.GAS_PRICE}}' ) \
            --legacy \
            --diamond-owner-key ${ARENASTATE_OWNER_KEY} \
            --diamond-init-name DiamondNew \
            --diamond-init-args \
              '[{"typeURIs": ["GAME_TYPE", "TRANSCRIPT_TYPE", "FURNITURE_TYPE"]}]' \
            -f diamond-deploy.json \
            $([ -n '{{.COMMIT}}' ] && echo -n '--commit {{.COMMIT}}' )

  find:
    dotenv: [".env.{{.PROVIDER_ID}}"]
    vars:
      PROVIDER_ID: '{{.PROVIDER_ID | default "hh"}}'
      DIAMOND_NONCE: '{{.DIAMOND_NONCE | default ""}}'

    desc: find the arena on the chosen PROVIDER_ID
    cmds:
      - |
        {{.DEPLOYCLI}} \
          -u "${ARENASTATE_PROVIDER_URL}" \
          -d "${ARENASTATE_DEPLOY_KEY}" \
          find \
            $([ -n '{{.DIAMOND_NONCE}}' ] && echo -n '--diamond-nonce {{.DIAMOND_NONCE}}' )

  dev:hh:start:
    desc: start a local hardhat node (if there isn't one running)
    cmds:
      - tusk -q -f {{.TUSKS}}/tusk-hardhat.yml start-node -d .local/hh

  dev:hh:restart:
    desc: restart the local hardhat node
    deps: [dev:hh:stop]
    cmds:
      - task: dev:hh:start

  dev:hh:stop:
    desc: stop a local hardhat node (according to pid in .local/hh/hh-pid)
    cmds:
      - |
        set -x
        ls -la {{.TUSKS}}
        tusk -q -f {{.TUSKS}}/tusk-hardhat.yml stop-node -d .local/hh
